<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xml:base="https://www.a-fro.com/">
  <channel>
    <title>a-fro.com</title>
    <link>https://www.a-fro.com/</link>
    <description/>
    <language>en</language>
    
    <item>
  <title>Creating Reusable Dynamic Content Components</title>
  <link>https://www.a-fro.com/blog/drupal/creating-reusable-dynamic-content-components</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Creating Reusable Dynamic Content Components&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:36&lt;/span&gt;

            &lt;div class="field field--name-field-representative-image field--type-entity-reference field--label-hidden field__item"&gt;  &lt;img src="https://www.a-fro.com/sites/default/files/styles/large_21_9/public/2021-12/reusable-components.jpg?itok=hSe8YAKH" width="1596" height="684" alt="A screenshot showing the "up next" reusable tagged content block " loading="lazy" class="image-style-large-21-9" /&gt;


&lt;/div&gt;
      
            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2018-11-06T12:00:00Z" class="datetime"&gt;November 6, 2018&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;This is part 2 in this series that explores &lt;a href="https://a-fro.com/blog/creating-paragraphs-entities-dynamic-content"&gt;how to use paragraph bundles to store configuration for dynamic content&lt;/a&gt;. The example I built in part 1 was a "read next" section, which could then be added as a component within the flow of the page. The strategy makes sense for component-based sites and landing pages, but probably less so for blogs or content heavy sites, since what we really want is for each article to include the read next section at the end of the page. For that, a view that displays as a block would perfectly suffice. In practice, however, it can be really useful to have a single custom block type, which I often call a "component block", that has an entity reference revisions field that we can leverage to create reusable components.&lt;/p&gt;

&lt;p&gt;This strategy offers a simple and unified interface for creating reusable components and adding them to sections of the page. Combined with Pattern Lab and the block visibility groups module, we get a pretty powerful tool for page building and theming.&lt;/p&gt;

&lt;p&gt;The image below captures the configuration screen for the "Up next" block you can find at the bottom of this page. As you see, it sets the heading, the primary tag, and the number of items to show. Astute readers might notice, however, that there is a small problem with this implementation. It makes sense if all the articles are about Drupal, but on sites where there are lots of topics, having a reusable component with a hard-coded taxonomy reference makes less sense. Rather, we'd like the related content component to show content that is actually related to the content of the article being read.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="component component--original paragraph paragraph--type--media paragraph--view-mode--default"&gt;
            &lt;img src="https://www.a-fro.com/sites/default/files/styles/full_max/public/2021-12/screen_shot_2018-11-06_at_8.57.24_am.png?itok=pQLBaw9-" width="462" height="505" alt="Configuration fields for the tagged content block, including the heading, tag and number of items to show." loading="lazy" class="image-style-full-max" /&gt;



      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;For the purpose of this article, let's define the following two requirements: first, if the tagged content component has been added as a paragraph bundle to the page itself, then we will respect the tag supplied in its configuration. If, however, the component is being rendered in the up next block, then we will use the first term the article has been tagged with.&lt;/p&gt;

&lt;p&gt;To do that, we need three things: 1) we need our custom block to exist and to have a delta that we can use, 2) we need a preprocess hook to assign the theme variables, and 3) we need a twig template to render the component. If you're following along in your own project, then go ahead and create the component block now. I'll return momentarily to a discussion about custom block and the config system.&lt;/p&gt;

&lt;p&gt;Once the up next block exists, we can create the following preprocess function:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;function component_helper_preprocess_block__upnextblock(&amp;$variables) {
  if ($current_node = \Drupal::request()-&gt;attributes-&gt;get('node')) {
    $variables['primary_tag'] = $current_node-&gt;field_tags-&gt;target_id;
    $variables['nid'] = $current_node-&gt;id();
    $paragraph = $variables['content']['field_component_reference'][0]['#paragraph'];
    $variables['limit'] = $paragraph-&gt;field_number_of_items-&gt;getValue()[0]['value'];
    $variables['heading'] = $paragraph-&gt;field_heading-&gt;getValue()[0]['value'];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you remember from the first article, our tagged content paragraph template passed those values along to Pattern Lab for rendering. That strategy won't work this time around, though, because theme variables assigned to a block entity, for example, are not passed down to the content that is being rendered within the block.&lt;/p&gt;

&lt;p&gt;You might wonder if it's worth dealing with this complexity, given that we could simply render the view as a block, modify the contextual filter, place it and be done with it. What I like about this approach is the flexibility it gives us to render paragraph components in predictable ways. In many sites, we have 5, 10 or more component types. Not all (or even most) of them are likely to be reused in blocks, but it's a nice feature to have if your content strategy requires it. Ultimately, the only reason we're doing this small backflip is because we want to use the article's primary tag as the argument, rather than what was added to the component itself. In other component blocks (an image we want in the sidebar, for example) we could simply allow the default template to render its content.&lt;/p&gt;

&lt;p&gt;In the end, our approach is pretty simple: Our up next block template includes the paragraph template, rather than the standard block &lt;code&gt;{{ content }}&lt;/code&gt; rendering. This approach makes the template variables we assigned in the preprocess function available:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;{% include "@afro_theme/paragraphs/paragraph--tagged-content.html.twig" %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A different approach to consider would be adding a checkbox to the tagged content configuration, such as "Use page context instead of a specified tag". That would avoid having us having an extra hook and template. Other useful configuration fields we've used for dynamic component configuration include whether the query should require all tags, or any tag, when multiple are assigned, or the ability to specify whether the related content should exclude duplicates (useful when you have several dynamic components on a page but you don't want them to include the same content).&lt;/p&gt;

&lt;p&gt;As we wrap up, a final note I'll add is about custom blocks and the config system. The apprach I've been using for content entities that also become config (which is the case here), is to first create the custom block in my local development environment, then export the config and remove the UUID from the config while also copying the plugin uuid. You can then create an update hook that creates the content for the block before it gets imported to config:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;/**
 * Adds the "up next" block for posts.
 */
function component_helper_update_8001() {
  $blockEntityManager = \Drupal::service('entity.manager')
    -&gt;getStorage('block_content');

  $block = $blockEntityManager-&gt;create(array(
    'type' =&gt; 'component_block',
    'uuid' =&gt; 'b0dd7f75-a7aa-420f-bc86-eb5778dc3a54',
    'label_display' =&gt; 0,
  ));

  $block-&gt;info = "Up next block";

  $paragraph = Drupal\paragraphs\Entity\Paragraph::create([
    'type' =&gt; 'tagged_content',
    'field_heading' =&gt; [
      'value' =&gt; 'Up next'
    ],
    'field_number_of_items' =&gt; [
      'value' =&gt; '3'
    ],
    'field_referenced_tags' =&gt; [
      'target_id' =&gt; 1,
    ]
  ]);

  $paragraph-&gt;save();
  $block-&gt;field_component_reference-&gt;appendItem($paragraph);
  $block-&gt;save();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we deploy and run the update hook, we're able to import the site config and our custom block should be rendering on the page. Please let me know if you have any questions or feedback in the comments below. Happy Drupaling.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:36:24 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">17 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Drupal Pullquotes</title>
  <link>https://www.a-fro.com/blog/drupal/drupal-pullquotes</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Drupal Pullquotes&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:33&lt;/span&gt;

            &lt;div class="field field--name-field-representative-image field--type-entity-reference field--label-hidden field__item"&gt;  &lt;img src="https://www.a-fro.com/sites/default/files/styles/large_21_9/public/2021-12/pullqoutes.png?itok=MCLDYCDI" width="1596" height="684" alt="Several powerful quotes with a pullquote sprinkled off to the side to draw a reader's attention" loading="lazy" class="image-style-large-21-9" /&gt;


&lt;/div&gt;
      
            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2018-10-29T12:00:00Z" class="datetime"&gt;October 29, 2018&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;"Pullquotes", as described here, differ from blockquotes because they &lt;em&gt;duplicate&lt;/em&gt; a section of text within the page, and &lt;span class="pullquote"&gt;pullquotes get styled in a way that draws the reader's attention to the quote&lt;/span&gt;. As such, one simple solution that I've been using is to allow content editors to select a section of text while editing and click a button in the interface to designate it as a pullquote.&lt;/p&gt;

&lt;p&gt;TL;DR: &lt;a href="http://bit.ly/2qgTEjv"&gt;Grab your copy&lt;/a&gt; on GitHub today.&lt;/p&gt;

&lt;h2&gt;A quick overview of what's needed&lt;/h2&gt;

&lt;p&gt;We'll walk through the various pieces required in order to get this working on your site, but it can be summarized in three basic parts:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;The module code for the ckeditor plugin&lt;/li&gt;
	&lt;li&gt;Configuring at least one of your text formatters to include the pullquote button &lt;/li&gt;
	&lt;li&gt;Adding the js and css to your theme for the site&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Adding the Plugin&lt;/h2&gt;

&lt;p&gt;At this point, I'm not planning to release this as a contrib module for Drupal. If you are interested in doing that, however, then please know you have my full blessing. On projects where pullquotes are required, I tend to simply add them to a small, custom module that includes all of the specific administration tweaks for that project. If you choose to &lt;a href="http://bit.ly/2qgTEjv"&gt;download the GitHub repo&lt;/a&gt;, then you can simply drop the "pullquotes" folder into &lt;code&gt;modules/custom/&lt;/code&gt;, and &lt;code&gt;drush en pullquotes&lt;/code&gt;. If you want to add it to a different custom module, simply update the appropriate paths in &lt;code&gt;src/Plugin/CKEditorPlugin/Pullquote.php&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Configuring a Text Format&lt;/h2&gt;

&lt;p&gt;The next step is to add the ckeditor button to one of your text formats at &lt;code&gt;/admin/config/content/formats&lt;/code&gt;. See the image pictured below.&lt;/p&gt;

&lt;p&gt;If the format includes "Limit allowed HTML tags and correct faulty HTML", then be sure to add &lt;code&gt;&lt;span class&gt;&lt;/code&gt; to the allowed HTML tags, since that is how the plugin modifies the html and prepares it for your theme's javascript. Finally, export your configuration and commit it to your project repo.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="component component--content-width paragraph paragraph--type--media paragraph--view-mode--default"&gt;
            &lt;img src="https://www.a-fro.com/sites/default/files/styles/full_content/public/2021-12/pullquote-btn.png?itok=fBFjjYSi" width="700" height="394" alt="The ckeditor button for pullquotes that needs to be configured in the text format" loading="lazy" class="image-style-full-content" /&gt;



      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;h2&gt;Theming the pullquotes&lt;/h2&gt;

&lt;p&gt;The last step is to modify the javascript and styles that your theme uses to display the pullquotes that have been added in the editing interface. As you can see from the &lt;a href="http://bit.ly/2qgTEjv"&gt;GitHub repo&lt;/a&gt;, there are four files that will need to be updated or added to your theme:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;your theme info file&lt;/li&gt;
	&lt;li&gt;your theme library file&lt;/li&gt;
	&lt;li&gt;the javascript file that adds the markup&lt;/li&gt;
	&lt;li&gt;the scss (or css) file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our case, the javascript finds any/all pullquote spans on the page, and then adds them as asides to the DOM, alternating between right and left alignment (for desktop). The scss file then styles them appropriately for small and large breakpoints. Note, too, that the theme css includes specific styles that &lt;a href="https://a-fro.com/sites/default/files/styles/full_content/public/2018-10/pullquote-editing.png"&gt;display in the editing interface&lt;/a&gt;, so that content creators can easily see when a pullquote is being added or modified. To remove a pullquote, the editor simply selects it again (which turns the pullquote pink in our theme) and clicks the ckeditor button. &lt;/p&gt;

&lt;p&gt;That wraps up this simple tutorial. &lt;span class="pullquote"&gt;You can now rest assured that your readers will never miss an important quote again.&lt;/span&gt; The strategy is in no way bulletproof, and so its mileage may vary, but if you have questions, feedback, or suggestions on how this strategy can be improved, please add your comment below. &lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:33:36 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">16 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Creating Paragraphs Entities for Dynamic Content</title>
  <link>https://www.a-fro.com/blog/drupal/creating-paragraphs-entities-dynamic-content</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Creating Paragraphs Entities for Dynamic Content&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:28&lt;/span&gt;

            &lt;div class="field field--name-field-representative-image field--type-entity-reference field--label-hidden field__item"&gt;  &lt;img src="https://www.a-fro.com/sites/default/files/styles/large_21_9/public/2021-12/dynamic-content-paragraphs.png?itok=e5oTKHjU" width="1596" height="684" alt="Logos  with Paragraphs, Drupal and Atomic Design" loading="lazy" class="image-style-large-21-9" /&gt;


&lt;/div&gt;
      
            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2018-09-26T12:00:00Z" class="datetime"&gt;September 26, 2018&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;h2&gt;Preamble&lt;/h2&gt;

&lt;p&gt;I've been working with (and loving) &lt;a href="https://patternlab.io/"&gt;Pattern Lab&lt;/a&gt; for the past year and a half, and trying to find time to share some of the most valuable lessons I've learned. This tutorial is the first in what I hope will become a series of articles that demonstrate how I'm solving common requests and requirements for our projects. The underlying concept here does not require Pattern Lab, though I find it a particularly flexible and (mostly) intuitive way to create highly predictable, modular and reusable components.&lt;/p&gt;

&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;The paragraphs module has become a central ingredient for many component-based sites in recent years. However, our content strategy also often requires components that display dynamic content (think "Read Next", or "Also of Interest"). In this tutorial, I'll demonstrate how we've been solving this problem, by building paragraph bundles that serve as configuration entities that we can then use as arguments that we pass to a view via the &lt;a href="https://www.drupal.org/project/twig_tweak"&gt;Twig Tweak&lt;/a&gt; module. You can see a working version of the dynamic content component we'll be building in the "Up Next" card grid at the bottom of this tutorial. &lt;/p&gt;

&lt;h2&gt;Creating the View&lt;/h2&gt;

&lt;p&gt;We want our content editors to be able to add dynamic content to a page that includes a heading, the tag that should be used as a filter, and the number of items they want to display. To start with, let's create a view that is configured as a block of teasers with two contextual filters, the tag (or tags), and a filter that excludes a particular node id. The latter will prevent the current node from displaying within the block. I'm not going to offer a detailed explanation of building views in Drupal, since this is likely quite familiar to most readers.&lt;/p&gt;

&lt;h2&gt;Building the Paragraph Bundle&lt;/h2&gt;

&lt;p&gt;&lt;span id="cke_bm_329S" style="display:none"&gt; &lt;/span&gt; Once the view has been configured, it's time to create the paragraph bundle. I'll call it "Tagged content", and add the "configuration" fields we will need in order to render the dynamic content described above.  &lt;/p&gt;

&lt;p&gt;Once the bundle exists and the fields are present, we can ignore the "Manage display" interface, since we're going to circumvent the render pipeline via Twig Tweak. However, if we add a tagged content bundle to a page (in this case, I already have a content type that allows me to add paragraphs bundles to the page), we should see the values that we set being rendered to the screen via the paragraphs module base template.&lt;/p&gt;

&lt;p&gt;The next step, therefore, is creating a paragraph item template that is responsible for rendering the view rather than the actual content of the item, using the "configuration settings" from the paragraph item that we just created.&lt;/p&gt;

&lt;h2&gt;Twig Field Value and Twig Tweak FTW&lt;/h2&gt;

&lt;p&gt;Our "configuration" entity is now ready for rendering the view. To do that, we'll leverage the &lt;a href="https://www.drupal.org/project/twig_field_value"&gt;Twig Field Value&lt;/a&gt; module to get the values from the paragraph bundle and pass them to the view via &lt;a href="https://www.drupal.org/project/twig_tweak"&gt;Twig Tweak&lt;/a&gt;. Here's how that looks in the paragraph item template file (paragraph--tagged-content.html.twig):&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;{% set tids = content.field_referenced_tags['#items'] is not empty
  ? content.field_referenced_tags|field_raw('target_id')|safe_join(',')
  : 'all' %}

{% set limit = content.field_number_of_items|field_raw('value') %}

{% set heading = content.field_heading|field_raw('value') %}

{# Leverage twig_tweak to create the render array #}
{% set view = drupal_view('tagged_content', 'block_1', tids, nid, limit, heading) %}

{{ view }}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After rebuilding the cache and refreshing the page, we'll now see the content teasers being rendered, though our "Number of items" setting isn't yet working. Also, the value of &lt;code&gt;nid&lt;/code&gt; is undefined, which is what we need in order to exclude the current node from the tagged content list. In order to accomplish those two things, as well as prepare for future component hook implementations, we'll create a small custom module called "&lt;a href="https://github.com/a-fro/a-fro.com/tree/master/web/modules/custom/component_helper"&gt;component helper&lt;/a&gt;". The relevant hooks are:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;/**
 * Implements hook_preprocess_entity().
 */
function component_helper_preprocess_paragraph__tagged_content(&amp;$variables) {
  if ($current_node = \Drupal::request()-&gt;attributes-&gt;get('node')) {
    $variables['nid'] = $current_node-&gt;id();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;/**
 * Implements hook_views_query_substitutions().
 * Sets the number of items based on the paragraph bundle setting
 * Using this hook instead of alter so that queries can be cached.
 */
function component_helper_views_query_substitutions(ViewExecutable $view) {
  if ($view-&gt;id() == 'tagged_content') {
    $limit = (isset($view-&gt;args[2])) ? $view-&gt;args[2] : 0;
    if ($limit &gt; 0) {
      $view-&gt;query-&gt;setLimit($limit);
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Rendering the View Through Pattern Lab&lt;/h2&gt;

&lt;p&gt;Now we're ready to map our variables in Drupal and send them to be rendered in Pattern Lab. If you're not familiar with it, I suggest you start by learning more about &lt;a href="http://emulsify.info"&gt;Emulsify&lt;/a&gt;, which is Four Kitchens' Pattern Lab-based Drupal 8 theme. Their team is not only super-helpful, they're also very active on the DrupalTwig #pattern-lab channel. In this case, we're going to render the teasers from our view as card molecules that are part of a card grid organism. In order to that, we can simply pass the view &lt;code&gt;rows&lt;/code&gt; to the the organism, with a newly created view template (views-view--tagged-content.html.twig):&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;{# Note that we can simply pass along the arguments we sent via twig_tweak  #} 

{% set heading = view.args.3 %}

{% include '@organisms/card-grid/card-grid.twig' with {
  grid_content: rows,
  grid_blockname: 'card',
  grid_label: heading
} %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the view is set to render teasers, the final step is to create a Drupal theme template for node teasers that will be responsible for mapping the field values to the variables that the card template in Pattern Lab expects.  &lt;/p&gt;

&lt;p&gt;Generally speaking, for Pattern Lab projects I subscribe to the principle that the role of our Drupal theme templates is to be data mappers, whose responsibility it is to take Drupal field values and map them to Pattern Lab Twig variables for rendering. Therefore, we never output HTML in the theme template files. This helps us keep a clean separation of concerns between Drupal's theme and Pattern Lab, and gives us more predictable markup (note &lt;em&gt;more&lt;/em&gt;, since this only applies to templates that we're creating and adding to the theme; otherwise, the Drupal render pipeline is in effect). Here is the teaser template we use to map the values and send them for rendering in Pattern Lab (node--article--teaser.html.twig):&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;{% set img_src = (img) ? img.uri|image_style('teaser') : null %}

{% include "@molecules/card/01-card.twig" with {
  "card_modifiers": 'grid-item',
  "card_img_src": img_src,
  "card_title": label,
  "card_link_url": url,
} %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you're wondering about the &lt;code&gt;img&lt;/code&gt; object above, that's related to another &lt;a href="https://github.com/a-fro/media_essentials/"&gt;custom module&lt;/a&gt; that I wrote several years ago to make working with images from media more user friendly. It's definitely out of date, so if you're interested in better approaches to responsive images in Drupal and Pattern Lab, have a look at &lt;a href="https://mark.ie/blog/web-development/responsive-images-patternlab-and-drupal-easy-way"&gt;what Mark Conroy has to say&lt;/a&gt; on the topic. Now, if we clear the cache and refresh the page, we should see our teasers rendering as cards (see "Up Next" below for a working version).&lt;/p&gt;

&lt;p&gt;Congrats! At this point, you've reached the end of this tutorial. Before signing off, I'll just mention other useful "configuration" settings we've used, such as "any" vs. "all" filtering when using multiple tags, styled "variations" that we can leverage as BEM modifiers, and checkboxes that allow a content creator to specify which content types should be included. The degree of flexibility required will depend on the content strategy for the project, but the underlying methodology works similarly in each case. Also, stay tuned, as in the coming weeks I'll show you how we've chosen to extend this implementation in a way that is both predictable and reusable (blocks, anyone?).&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:28:01 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">15 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Multiple MailChimp Accounts with Drupal</title>
  <link>https://www.a-fro.com/blog/drupal/multiple-mailchimp-accounts-drupal</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Multiple MailChimp Accounts with Drupal&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:25&lt;/span&gt;

            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2016-12-20T12:00:00Z" class="datetime"&gt;December 20, 2016&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;A couple of months ago, &lt;a href="https://github.com/thinkshout/"&gt;team ThinkShout&lt;/a&gt; quietly introduced a feature to the &lt;a href="https://www.drupal.org/project/mailchimp"&gt;MailChimp module&lt;/a&gt; that some of us have really wanted for a long time—the ability to support multiple MailChimp accounts from a single Drupal installation. This happened, in part, after I reached out to them on behalf of the stakeholders at Cornell University's ILR School, where I work. Email addresses can be coveted resources within organizations, and along with complex governance requirements, it's not uncommon for a single organization to have internal groups who use separate MailChimp accounts. I'm not going to comment on whether this is a good or wise practice, just to acknowledge that it's a reality.&lt;/p&gt;

&lt;p&gt;In our case, we currently have three groups within school who are using MailChimp extensively to reach out to their constituents. Up until this week, this required a manual export of new subscribers (whom we are tracking with &lt;a href="https://www.drupal.org/project/entityform"&gt;entityforms&lt;/a&gt;), some custom code to transform the csv values into the correct format for MailChimp, and then a manual import to the respective list. However, as our most recent deployment, we are now able to support all three group's needs (including one who is using &lt;a href="http://a-fro.com/introducing-mailchimp-automations"&gt;MailChimp automations&lt;/a&gt;). Let's dig into how we're doing it.&lt;/p&gt;

&lt;p&gt;The important change that ThinkShout introduced came from &lt;a href="https://github.com/thinkshout/mailchimp/commit/d5b8a3da20f4e058ec04115e380259e3c1da50d7#diff-bb0d240e8bb9e959c6e84bae87e337d4R157"&gt;this commit&lt;/a&gt;, which invokes a new alter hook that allows a developer to modify the key being used for the API object. And though this is an essential hook if we want to enable multiple keys, it also doesn't accomplish much given that &lt;code&gt;mailchimp_get_api_object&lt;/code&gt; is called in dozens of places through the suite of MailChimp modules and therefore it's difficult to know the exact context of the api request. For that reason, we really need a more powerful way to understand the context of a given API call.&lt;/p&gt;

&lt;p&gt;To that end, we created a new sandbox module called &lt;a href="https://www.drupal.org/sandbox/a-fro/2835792"&gt;MailChimp Accounts&lt;/a&gt;. This module is responsible for five things:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Allowing developers to register additional MailChimp accounts and account keys&lt;/li&gt;
	&lt;li&gt;Enabling developers to choose the appropriate account for MailChimp configuration tasks&lt;/li&gt;
	&lt;li&gt;Switching to the correct account when returning to configuration for an existing field or automation entity&lt;/li&gt;
	&lt;li&gt;Restarting the form rendering process when a field widget needs to be rendered with a different MailChimp account&lt;/li&gt;
	&lt;li&gt;Altering the key when the configuration of a MailChimp-related field or entity requires it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to try this for yourself, you'll first need to download the &lt;a href="https://www.drupal.org/project/mailchimp/releases/7.x-4.7"&gt;newest release&lt;/a&gt; of the MailChimp module, if you're not already running it. You'll also need to download the &lt;a href="https://www.drupal.org/sandbox/a-fro/2835792"&gt;MailChimp Accounts&lt;/a&gt; sandbox module. The core functionality of the MailChimp Accounts module relies on its implementation of a hook called &lt;code&gt;hook_mailchimp_accounts_api_key&lt;/code&gt;, which allows a module to register one or more MailChimp accounts.&lt;/p&gt;

&lt;p&gt;In order to register a key, you will need to find the account id. Since MailChimp doesn't offer an easy way to discover an account id, we built a simple callback page that allows you to retrieve the account data for a given key. You'll find this in the admin interface at /admin/config/mailchimp/account-info on your site. When you first arrive at that page, you should see the account values for your "default" MailChimp account. In this case, "default" simply means it's the API key registered through the standard MailChimp module interface, which stores the value in the variables table. However, if you input a different key on that page, you can retrieve information about that account from the MailChimp API.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="component component--content-width paragraph paragraph--type--media paragraph--view-mode--default"&gt;
            &lt;img src="https://www.a-fro.com/sites/default/files/styles/full_content/public/2021-12/mc-account-info.jpg?itok=5xUImTqj" width="700" height="394" alt="MailChimp Account info callback page" loading="lazy" class="image-style-full-content" /&gt;



      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;The screenshot above offers an example of some of the data that is returned by the MailChimp API, but you will see additional information including list performance when you query an active account. The only essential piece of information, however, is the account_id, which we will use to register additional accounts that we can then use via &lt;code&gt;hook_mailchimp_accounts_api_key()&lt;/code&gt;. Here's an example of how to implement that hook:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;
/**
 * Register API key(s) for MailChimp Accounts
 *
 * @return array
 *   The keys are the account id and the values are the API keys
 */
function mymodule_mailchimp_accounts_api_key() { 
  $keys = array(
    '2dd44aa1db1c924d42c047c96' =&gt; 'xxxxxxxx123434234xxxxxx3243xxxx3-us13',
    '411abe81940121a1e89a02abc' =&gt; '123434234xxxxxx23233243xxxxxxx13-us12',
  ); 
  return $keys; 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once there is more than one API key registered in a Drupal site, you will see a new option to select the current account to use for any MailChimp configuration taking place in the administrative interface. After selecting a different account, you will also see a notice clarifying which API key is currently active in the admin interface. You can see an example in the screenshot below.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="component component--content-width paragraph paragraph--type--media paragraph--view-mode--default"&gt;
            &lt;img src="https://www.a-fro.com/sites/default/files/styles/full_content/public/2021-12/mc-account-select-notice-fixed_0.jpg?itok=9PB4ZJST" width="700" height="394" alt="MailChimp account notice and select menu" loading="lazy" class="image-style-full-content" /&gt;



      &lt;/div&gt;
&lt;/div&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;After choosing an account to use for configuration, administrative tasks such as MailChimp subscription fields will use that key when making API calls. Therefore, the available options for lists, merge fields and interest groups will correspond to the appropriate account. Additionally, when the field widget renders the form element, the API key is altered yet again so that the subscriber will be added to the appropriate list, interest groups, etc. Additionally, I can confirm from my testing that the interface for Mailchimp Automations entities also uses the correct API key, enabling support for that MailChimp submodule.&lt;/p&gt;

&lt;p&gt;This concludes our walkthrough of the new MailChimp Accounts module. Admittedly, it's not the most elegant solution ever created, but it not only satisfies our organization's complex governance requirements, but it also allows our stakeholders to begin thinking about new possibilities for improving their marketing and communications efforts.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:25:25 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">14 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Introducing MailChimp Automations for Drupal</title>
  <link>https://www.a-fro.com/blog/drupal/introducing-mailchimp-automations-drupal</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Introducing MailChimp Automations for Drupal&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:24&lt;/span&gt;

            &lt;div class="field field--name-field-representative-image field--type-entity-reference field--label-hidden field__item"&gt;  &lt;img src="https://www.a-fro.com/sites/default/files/styles/large_21_9/public/2021-12/mastering-mailchimp-large.jpeg?itok=sNJg9FwL" width="1596" height="684" alt="Mailchimp banner with logo" loading="lazy" class="image-style-large-21-9" /&gt;


&lt;/div&gt;
      
            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2016-11-30T12:00:00Z" class="datetime"&gt;November 30, 2016&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;Recent additions to Drupal 7’s &lt;a href="https://www.drupal.org/project/mailchimp"&gt;MailChimp module&lt;/a&gt; and &lt;a href="https://github.com/thinkshout/mailchimp-api-php/"&gt;API library&lt;/a&gt; offer some powerful new ways for you to integrate Drupal and MailChimp. As of version 7.x-4.7, the Drupal MailChimp module now supports automations, which are incredibly powerful and flexible ways to trigger interactions with your users. Want to reach out to a customer with product recommendations based on their purchase history? Have you ever wished you could automatically send your newsletter to your subscribers when you publish it in Drupal? Or wouldn’t it be nice to be able to send a series of emails to participants leading up to an event without having to think about it? You can easily do all of those things and much more with MailChimp automations.&lt;/p&gt;

&lt;p&gt;Recent additions to Drupal 7’s &lt;a href="https://www.drupal.org/project/mailchimp"&gt;MailChimp module&lt;/a&gt; and &lt;a href="https://github.com/thinkshout/mailchimp-api-php/"&gt;API library&lt;/a&gt; offer some powerful new ways for you to integrate Drupal and MailChimp. As of version 7.x-4.7, the Drupal MailChimp module now supports automations, which are incredibly powerful and flexible ways to trigger interactions with your users. Want to reach out to a customer with product recommendations based on their purchase history? Have you ever wished you could automatically send your newsletter to your subscribers when you publish it in Drupal? Or wouldn’t it be nice to be able to send a series of emails to participants leading up to an event without having to think about it? You can easily do all of those things and much more with MailChimp automations.&lt;/p&gt;

&lt;p&gt;First of all, big thanks to the team at &lt;a href="https://thinkshout.com/"&gt;ThinkShout&lt;/a&gt; for all their great feedback and support over the past few months of development. To get started, download the newest release of the &lt;a href="https://www.drupal.org/project/mailchimp"&gt;MailChimp module&lt;/a&gt; and then enable the MailChimp Automations submodule (&lt;code&gt;drush en mailchimp_automations -y&lt;/code&gt;). Or, if you’re already using the MailChimp module, update to the latest version, as well as the most recent version of the &lt;a href="https://github.com/thinkshout/mailchimp-api-php/releases/latest"&gt;PHP API library&lt;/a&gt;. Also note that although MailChimp offers many powerful features on their free tier, automations are a paid feature with plans starting at $10/month.&lt;/p&gt;

&lt;p&gt;Once you follow the readme instructions for the MailChimp module (and have configured your API key), you’re ready to enable your first automation. But before we do that, I’d like to take a step back and talk a bit more conceptually about automations and how we’re going to tie them to Drupal. The MailChimp documentation uses the terms “automations” and “workflows” somewhat interchangeably, which can be a bit confusing at first. Furthermore, any given workflow can have multiple emails associated with it, and you can combine different triggers for different emails in a single workflow. Triggers can be based on a range of criteria, such as activity (clicking on an email), inactivity (failing to open an email), time (a week before a given date), or, as in our case, an &lt;em&gt;integration&lt;/em&gt;, which is MailChimp’s term for it since the API call is the trigger.&lt;/p&gt;

&lt;p&gt;The api resource we’re using is the &lt;a href="http://developer.mailchimp.com/documentation/mailchimp/reference/automations/emails/queue/"&gt;automation email queue&lt;/a&gt;, which requires a workflow id, a workflow email id, and an email address. In Drupal, we can now accomplish this by creating a MailChimp Automation entity, which is simply a new Drupal entity that ties any other Drupal entity—provided it has an email field—with a specific workflow email in MailChimp. Once you have that simple concept down, the sky’s the limit in terms of how you integrate the entities on your site with MailChimp emails. This means, for example, that you could tie an entityform submission with a workflow email in MailChimp, which could, in turn, trigger another time-based email a week later (drip campaign, anyone?).&lt;/p&gt;

&lt;p&gt;This setup becomes even more intriguing when you contrast it to an expensive marketing solution like Pardot. Just because you may be working within tight budget constraints doesn’t mean you can’t have access to powerful, custom engagement tools. Imagine you’re using another one of ThinkShout’s projects, RedHen CRM, to track user engagement on your site. You’ve assigned scoring point values to various actions a user might take on your site, reading an article, sharing it on social media, or submitting a comment. In this scenario, you could track a given user’s score over time, and then trigger an automation when a user crosses a particular scoring threshold, allowing you to even further engage your most active users on the site.&lt;/p&gt;

&lt;p&gt;I’m only beginning to scratch the surface on the possibilities of the new MailChimp Automations module. If you're interested in learning more, feel free to take a look at our recent &lt;a href="http://slides.com/a-fro/automating-marketing-and-communication-with-mailchimp/"&gt;Drupal Camp presentation&lt;/a&gt;, or find additional inspiration in both the &lt;a href="https://mailchimp.com/features/automation/"&gt;feature documentation&lt;/a&gt; and &lt;a href="https://mailchimp.com/resources/guides/working-with-automation/html/"&gt;automation resource guide&lt;/a&gt;. Stay tuned, as well, for an upcoming post about another powerful new feature recently introduced into the MailChimp module: support for multiple MailChimp accounts from a single Drupal site!&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:24:17 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">13 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Speed Up Cache Clearing on Drupal 7</title>
  <link>https://www.a-fro.com/blog/drupal/speed-cache-clearing-drupal-7</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Speed Up Cache Clearing on Drupal 7&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:21&lt;/span&gt;

            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2015-11-24T12:00:00Z" class="datetime"&gt;November 24, 2015&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;h2&gt;Cache clearing nirvana may be two vsets away&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;tl;dr &lt;/strong&gt;If your D7 site uses features or has many entity types, some recent patches to the &lt;a href="https://www.drupal.org/node/2378343"&gt;features module&lt;/a&gt; and the &lt;a href="https://www.drupal.org/node/2241979"&gt;entity api module&lt;/a&gt; may deliver dramatic performance increases when you clear Drupal's cache. The magic:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
    $ drush vset features_rebuild_on_flush FALSE
    $ drush vset entity_rebuild_on_flush FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Backstory&lt;/h2&gt;

&lt;p&gt;Given that &lt;a href="https://www.drupal.org/u/tedbow"&gt;tedbow&lt;/a&gt; is a good friend in our little slice of paradise, aka Ithaca, NY, we decided that we were going to embrace the &lt;a href="https://www.drupal.org/project/entityform"&gt;entityform module&lt;/a&gt; on the &lt;a href="http://www.ilr.cornell.edu"&gt;large Drupal migration&lt;/a&gt; I was hired to lead. Fifty-eight entityforms and 420 fields later (even with diligent field re-use), we now see how, in some cases, a &lt;a href="http://drupal.org/project/webform"&gt;pseudo-field system&lt;/a&gt; has real benefits, even if it's not the most future-proof solution. As our cache clears became slower and slower (at times taking nearly 10 minutes for a teammate with an older computer), I began to suspect that entityform and/or our extensive reliance on the Drupal field system might be a culprit. Two other corroborating data points were the length of time that feature reverts took when they involved entityforms. Even deployments became a hassle because we had to carefully time them if they required the cache to be cleared, which would make the site unresponsive for logged-in users and cache-cold pages for 5 minutes or more. Clearly, something needed to be done.&lt;/p&gt;

&lt;h2&gt;Diagnosing&lt;/h2&gt;

&lt;p&gt;I'm sure there are better ways to handle performance diagnostics (using xDebug, for example), but given the procedural nature of &lt;code&gt;drupal_flush_all_caches&lt;/code&gt; it seemed like the devel module would work just fine. I modified the code in Drupal's common.inc file to include the following:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;
function time_elapsed($comment,$force=FALSE) {
  static $time_elapsed_last = null;
  static $time_elapsed_start = null;

  $unit="s"; $scale=1000000; // output in seconds
  $now = microtime(true);
  if ($time_elapsed_last != null) {
    $elapsed = round(($now - $time_elapsed_last)*1000000)/$scale;
    $total_time = round(($now - $time_elapsed_start)*1000000)/$scale;
    $msg = "$comment: Time elapsed: $elapsed $unit,";
    $msg .= " total time: $total_time $unit";
    dpm($msg);
  }
  else {
      $time_elapsed_start=$now;
  }
  $time_elapsed_last = $now;
}
/**
 * Flushes all cached data on the site.
 *
 * Empties cache tables, rebuilds the menu cache and theme registries, and
 * invokes a hook so that other modules' cache data can be cleared as well.
 */
function drupal_flush_all_caches(){
  // Change query-strings on css/js files to enforce reload for all users.
  time_elapsed('_drupal_flush_css_js');
  _drupal_flush_css_js();
  time_elapsed('registry_rebuild');
  registry_rebuild();
  time_elapsed('drupal_clear_css_cache');
  drupal_clear_css_cache();
  time_elapsed('drupal_clear_js_cache');
  drupal_clear_js_cache();

  // Rebuild the theme data. Note that the module data is rebuilt above, as
  // part of registry_rebuild().
  time_elapsed('system_rebuild_theme_data');
  system_rebuild_theme_data();
  time_elapsed('drupal_theme_rebuild');
  drupal_theme_rebuild();
  time_elapsed('entity_info_cache_clear');
  entity_info_cache_clear();
  time_elapsed('node_types_rebuild');
  node_types_rebuild();
  // node_menu() defines menu items based on node types so it needs to come
  // after node types are rebuilt.
  time_elapsed('menu_rebuild');
  menu_rebuild();

  time_elapsed('actions_synchronize');
  // Synchronize to catch any actions that were added or removed.
  actions_synchronize();

  // Don't clear cache_form - in-progress form submissions may break.
  // Ordered so clearing the page cache will always be the last action.
  $core = array('cache', 'cache_path', 'cache_filter', 'cache_bootstrap', 'cache_page');
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    time_elapsed("clearing $table");
    cache_clear_all('*', $table, TRUE);
  }

  // Rebuild the bootstrap module list. We do this here so that developers
  // can get new hook_boot() implementations registered without having to
  // write a hook_update_N() function.
  _system_update_bootstrap_status();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next time I cleared cache (using admin_menu, since I wanted the dpm messages available), I saw the following:&lt;/p&gt;

&lt;p class="messages messages--status"&gt;registry_rebuild: Time elapsed: 0.003464 s, total time: 0.003464 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;drupal_clear_css_cache: Time elapsed: 3.556191 s, total time: 3.559655 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;drupal_clear_js_cache: Time elapsed: 0.001589 s, total time: 3.561244 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;system_rebuild_theme_data: Time elapsed: 0.003462 s, total time: 3.564706 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;drupal_theme_rebuild: Time elapsed: 0.122944 s, total time: 3.68765 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;entity_info_cache_clear: Time elapsed: 0.001606 s, total time: 3.689256 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;node_types_rebuild: Time elapsed: 0.003054 s, total time: 3.69231 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;menu_rebuild: Time elapsed: 0.052984 s, total time: 3.745294 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;actions_synchronize: Time elapsed: 3.334542 s, total time: 7.079836 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_block: Time elapsed: 31.149723 s, total time: 38.229559 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_ctools_css: Time elapsed: 0.00618 s, total time: 38.235739 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_feeds_http: Time elapsed: 0.003292 s, total time: 38.239031 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_field: Time elapsed: 0.006714 s, total time: 38.245745 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_image: Time elapsed: 0.013317 s, total time: 38.259062 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_libraries: Time elapsed: 0.007708 s, total time: 38.26677 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_token: Time elapsed: 0.007837 s, total time: 38.274607 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_views: Time elapsed: 0.006798 s, total time: 38.281405 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_views_data: Time elapsed: 0.008569 s, total time: 38.289974 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache: Time elapsed: 0.006926 s, total time: 38.2969 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_path: Time elapsed: 0.009662 s, total time: 38.306562 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_filter: Time elapsed: 0.007552 s, total time: 38.314114 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_bootstrap: Time elapsed: 0.005526 s, total time: 38.31964 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;clearing cache_page: Time elapsed: 0.009511 s, total time: 38.329151 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;hook_flush_caches: total time: 38.348554 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;Every cache cleared.&lt;/p&gt;

&lt;p&gt;My initial response was to wonder how and why the cache_block would take so long. Then, however, I noticed line 59 above, which calls &lt;code&gt;module_invoke_all('flush_caches')&lt;/code&gt;, which should have been obvious. Also, given that I was just looking for bottlenecks, I modified both &lt;code&gt;module_invoke($module, $hook)&lt;/code&gt; in module.inc, as well as the &lt;code&gt;time_elapsed&lt;/code&gt; to get the following:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="php"&gt;
function time_elapsed($comment,$force=FALSE) {
  static $time_elapsed_last = null;
  static $time_elapsed_start = null;
  static $last_action = null; // Stores the last action for the elapsed time message

  $unit="s"; $scale=1000000; // output in seconds
  $now = microtime(true);

  if ($time_elapsed_last != null) {
    $elapsed = round(($now - $time_elapsed_last)*1000000)/$scale;
    if ($elapsed &gt; 1 || $force) {
      $total_time = round(($now - $time_elapsed_start)*1000000)/$scale;
      $msg = ($force)
        ? "$comment: "
        : "$last_action: Time elapsed: $elapsed $unit,";
      $msg .= " total time: $total_time $unit";
      dpm($msg);
    }
  } else {
      $time_elapsed_start=$now;
  }
  $time_elapsed_last = $now;
  $last_action = $comment;
}


/** From module.inc */
function module_invoke_all($hook) {
  $args = func_get_args();
  // Remove $hook from the arguments.
  unset($args[0]);
  $return = array();
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      if ($hook == 'flush_caches') {
        time_elapsed($function);
      }
      $result = call_user_func_array($function, $args);
      if (isset($result) &amp;&amp; is_array($result)) {
        $return = array_merge_recursive($return, $result);
      }
      elseif (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results pointed to the expected culprits:&lt;/p&gt;

&lt;p class="messages messages--status"&gt;registry_rebuild: Time elapsed: 4.176781 s, total time: 4.182339 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;menu_rebuild: Time elapsed: 3.367128 s, total time: 7.691533 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;entity_flush_caches: Time elapsed: 22.899951 s, total time: 31.068898 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;features_flush_caches: Time elapsed: 7.656231 s, total time: 39.112933 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;hook_flush_caches: total time: 39.248036 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;Every cache cleared.&lt;/p&gt;

&lt;p&gt;After a little digging into the features issue queue, I was delighted to find out that patches had already been committed to both modules (though entity api does not have it in the release yet, so you have to use the dev branch). Two module updates and two vsets later, I got the following results:&lt;/p&gt;

&lt;p class="messages messages--status"&gt;registry_rebuild: Time elapsed: 3.645328 s, total time: 3.649398 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;menu_rebuild: Time elapsed: 3.543039 s, total time: 7.378718 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;hook_flush_caches: total time: 8.266036 s&lt;/p&gt;

&lt;p class="messages messages--status"&gt;Every cache cleared.&lt;/p&gt;

&lt;p&gt;Cache clearing nirvana reached!&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:21:52 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">12 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Ansible and Drupal Development - Part 2</title>
  <link>https://www.a-fro.com/blog/drupal/ansible-and-drupal-development-part-2</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Ansible and Drupal Development - Part 2&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:20&lt;/span&gt;

            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2014-11-03T12:00:00Z" class="datetime"&gt;November 3, 2014&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;In &lt;a href="https://www.a-fro.com/ansible-and-drupal-development"&gt;part 1&lt;/a&gt; of this tutorial, we covered how to configure and use Ansible for local Drupal development. If you didn't have a chance to read that article, you can download &lt;a href="https://github.com/a-fro/drupal-dev-vm/tree/part1"&gt;my fork&lt;/a&gt; of Jeff Geerling's &lt;a href="https://github.com/geerlingguy/drupal-dev-vm"&gt;Drupal Dev VM&lt;/a&gt; to see the final, working version from part 1. In this article, we'll be switching things up quite a bit as we take a closer look at the 2nd three requirements, namely:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Using the same playbook for both local dev and remote administration (on DigitalOcean)&lt;/li&gt;
	&lt;li&gt;Including basic server security&lt;/li&gt;
	&lt;li&gt;Making deployments simple&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TL;DR Feel free to download the &lt;a href="https://github.com/a-fro/ansible-drupal-lamp"&gt;final, working version&lt;/a&gt; of this repo and/or use it to follow along with the article.&lt;/p&gt;

&lt;h3 id="caveat-emptor"&gt;Caveat Emptor&lt;/h3&gt;

&lt;p&gt;Before we dig in, I want to stress that I am not an expert in server administration and am relying heavily on the Ansible roles created by &lt;a href="http://jeffgeerling.com/"&gt;Jeff Geerling&lt;/a&gt;. The steps outlined in this article come from my own experience of trying use Ansible to launch this site, and I'm not aware of how they stray from best-practices. But if you're feeling adventurous, or like me, foolhardy enough to jump in headfirst and just try to figure it out, then read on.&lt;/p&gt;

&lt;h3 id="sharing-playbooks-between-local-and-remote-environments"&gt;Sharing Playbooks Between Local and Remote Environments&lt;/h3&gt;

&lt;p&gt;One of the features that makes Ansible so incredibly powerful is to be able to run a given task or playbook across a range of hosts. For example, when the Drupal Security team announced the &lt;a href="https://www.drupal.org/SA-CORE-2014-005"&gt;SQL injection bug&lt;/a&gt; now known as "Drupalgeddon", Jeff Geerling wrote a great post about using &lt;a href="http://www.midwesternmac.com/blogs/jeff-geerling/fixing-drupal-fast-using"&gt;Ansible to deploy a security fix on many sites&lt;/a&gt;. Given that any site that was not updated within 12 hours is now considered compromised, you can easily see what an important role Ansible can play. Ansible is able to connect to any host that is defined in the default inventory file at &lt;code&gt;/etc/ansible/hosts&lt;/code&gt;. However, you can also create a project specific inventory file and put it the git repo, which is what we'll do here.&lt;/p&gt;

&lt;p&gt;To start with, we'll add a file called "inventory" and put it in the provisioning folder. &lt;a href="http://docs.ansible.com/intro_inventory.html"&gt;Inventories&lt;/a&gt; are in ini syntax, and basically allow you to define hosts and groups. For now, simply add the following lines to the inventory:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="yml"&gt;[dev]
yourdomain.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The inventory can define hostnames or IP addresses, so 192.168.88.88 (the IP address from the Vagrantfile) would work fine here as well. Personally, I prefer hostnames because I find them easier to organize and track. It will also help us avoid an issues with Ansible commands on the local VirtualBox. With our dev host defined, we are now able to set any required host-specific variables.&lt;/p&gt;

&lt;p&gt;Ansible is extremely flexible in how you create and assign variables. For the most part, we'll be using the same variables for all our environments. But a few of them, such as the Drupal domain, ssh port, etc., will be different. Some of these differences are related to the group (such as the ssh port Ansible connects to), while other's are host-specific (such as the Drupal domain). Let's start by creating a folder called "host_vars" in the provisioning folder with a file in it named with the host name of your dev site (a-fro.dev for me). Add the following lines to it:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
drupal_domain: "yourdomain.dev"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we're ready to dig into remote server configuration for the first time. Lately, I've been using DigitalOcean to host my virtual servers because they are inexpensive (starting at $5/month) and they have a plethora of good tutorials that helped me work through the manual configuration workflows I was using. I'm sure there are many other good options, but the only requirement is to have a server to which you have root access and have added your public key. I also prefer to have a staging server where I can test things remotely before deploying to production, so for the sake of this tutorial let's create a server that will host stage.yourdomain.com. If you're using a domain for which DNS is not yet configured, you can just add it to your system's hosts file and point to the server's IP address.&lt;/p&gt;

&lt;p&gt;Once you've created your server (I chose the most basic plan at DO and added Ubuntu 12.04 x32), you'll want to add it to your inventory like so:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;[staging]
stage.yourdomain.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that DNS is either already set up, or that you've added the domain to your hosts file, Ansible is now almost ready to talk to the server for the first time. The last thing Ansible needs is some ssh configuration. If you're used to adding this to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file, that's fine. That approach would work fine for now, but we'll see that it will impose some limitations as we move forward, so let's go ahead and add the ssh config to the host file (&lt;code&gt;host_vars/stage.yourdomain.com&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
drupal_domain: "stage.yourdomain.com"
ansible_ssh_user: root
ansible_ssh_private_key_file: '~/.ssh/id_rsa'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, you should have everything you need to connect to your virtual server and configure it via Ansible. You can test this by heading to the provisioning folder of your repo and typing &lt;code&gt;ansible staging -i inventory -m ping&lt;/code&gt;, where "staging" is the group name you defined in your inventory file. You should see something like the following output:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;stage.yourdomain.com | success &gt;&gt; {
    "changed": false,
    "ping": "pong"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that's what you see, then congratulations! Ansible has just talked to your server for the first time. If not, you can try running the same command with &lt;code&gt;-vvvv&lt;/code&gt; and check the debug messages. We could run the playbook now from part 1 and it should configure the server, but before doing that, let's take a look at the next requirement.&lt;/p&gt;

&lt;h3 id="basic-server-security"&gt;Basic Server Security&lt;/h3&gt;

&lt;p&gt;Given that the Drupal Dev VM is really set up to support a local environment, it's missing important security features and requirements. Luckily, Jeff comes to the rescue again with a set of &lt;a href="https://github.com/a-fro/ansible-drupal-lamp/blob/master/requirements.txt"&gt;additional Ansible roles&lt;/a&gt; we can add to the playbook to help fill in the gaps. We'll need the roles installed on our system, which we can do with &lt;code&gt;ansible-galaxy install -r requirements.txt&lt;/code&gt; (&lt;a href="http://docs.ansible.com/galaxy.html#installing-multiple-roles-from-a-file"&gt;read more about roles and files&lt;/a&gt;). If you already have the roles installed, the easiest way to make sure they're up-to-date is with &lt;code&gt;ansible-galaxy install -r requirements.txt --force&lt;/code&gt; (since updating a role is not yet supported by Ansible Galaxy).&lt;/p&gt;

&lt;p&gt;In this section, we'll focus on the geerlingguy.firewall and geerlingguy.security roles. Jeff uses the same pattern for all his Ansible roles, so it's easy to find the default vars for a given role by replacing the role name (ie: ansible-role-rolename) of the url: &lt;a href="https://github.com/geerlingguy/ansible-role-security/blob/master/defaults/main.yml"&gt;https://github.com/geerlingguy/ansible-role-security/blob/master/defaults/main.yml&lt;/a&gt;. The two variables that we care about here are &lt;code&gt;security_ssh_port&lt;/code&gt; and &lt;code&gt;security_sudoers_passwordless&lt;/code&gt;. This role is going to help us remove password authentication, root login, change the ssh port and add a configured user account to the passwordless sudoers group.&lt;/p&gt;

&lt;p&gt;You might notice that the role says "configured user accounts", which begs the question: where does the account get configured? This was actually a stumbling block for me for a while, as I had to work through many different issues my attempts to create and configure the role. The approach we'll take here is working, though may not be the most efficient (or best-pratice, see Caveat Emptor above). Yet there is another issue as well, because the first time we connect to the server it will be over the default ssh port (22), but in the future, we want to choose a more secure port. We're also going to need to make sure that port gets opened on the firewall.&lt;/p&gt;

&lt;p&gt;Ansible's &lt;a href="http://docs.ansible.com/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable"&gt;variable precendence&lt;/a&gt; is going to help us work through these issues. To start with, let's take a look at the following example vars file:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
ntp_timezone: America/New_York

firewall_allowed_tcp_ports:
  - "{{ security_ssh_port }}"
  - "80"

# The core version you want to use (e.g. 6.x, 7.x, 8.0.x).
# A-fro note: this is slightly deceptive b/c it's really used to check out the correct branch
drupal_core_version: "master"

# The path where Drupal will be downloaded and installed.
drupal_core_path: "/var/www/{{ drupal_domain }}/docroot"

# Your drupal site's domain name (e.g. 'example.com').
# drupal_domain:  moved to group_vars

# Your Drupal site name.
drupal_site_name: "Aaron Froehlich's Blog"
drupal_admin_name: admin
drupal_admin_password: password

# The webserver you're running (e.g. 'apache2', 'httpd', 'nginx').
drupal_webserver_daemon: apache2

# Drupal MySQL database username and password.
drupal_mysql_user: drupal
drupal_mysql_password: password
drupal_mysql_database: drupal

# The Drupal git url from which Drupal will be cloned.
drupal_repo_url: "git@github.com:a-fro/a-fro.com.git"

# The Drupal install profile to be used
drupal_install_profile: standard

# Security specific
# deploy_user: defined in group_vars for ad-hoc commands
# security_ssh_port: defined in host_vars and group_vars
security_sudoers_passwordless:
  - "{{ deploy_user }}"
security_autoupdate_enabled: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll notice that some of the variables have been moved to host_vars or group_vars files. Our deploy_user, for example, would work just fine for our playbook if we define it here. But since we want to make this user available to Ansible for ad-hoc commands (not in playbooks), it is better to put it in &lt;code&gt;group_vars&lt;/code&gt;. This is also why we can't just use our &lt;code&gt;~/.ssh/config&lt;/code&gt; file. With Ansible, any variables added to &lt;code&gt;provisioning/group_vars/all&lt;/code&gt; are made available by default to all hosts in the inventory, so create that file and add the following lines to it:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
deploy_user: deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &lt;code&gt;security_ssh_port&lt;/code&gt;, we'll be connecting to our dev environment over the default port 22, but changing the port on our remote servers. I say servers (plural), because eventually we'll have both staging and production environments. We can modify our inventory file to make this a bit easier:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;[dev]
a-fro.dev

[staging]
stage.a-fro.com

[production]
a-fro.com

[droplets:children]
staging
production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to issue commands to a single host, or to all our droplets. Therefore, we can add a file called "droplets" to the group_vars folder and add the group-specific variables there:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
ansible_ssh_user: "{{ deploy_user }}"

security_ssh_port: 4895 # Or whatever you choose
ansible_ssh_port: "{{ security_ssh_port }}"

ansible_ssh_private_key_file: ~/.ssh/id_rsa # The private key that pairs to the public key on your remote server.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="configuring-the-deploy-user"&gt;Configuring the Deploy User&lt;/h3&gt;

&lt;p&gt;There are two additional issues that we need to address if we want our security setup to work. The first is pragmatic: using a string in the &lt;code&gt;security_sudoers_passwordless&lt;/code&gt; yaml array above works fine, but Ansible throws an error when we try to use a variable there. I have a pull request issued to Ansible-role-security that resolves this issue, but unless that gets accepted, we can't use the role as is. The easy alternative is to download that role to our local system and add it's contents to a folder named "roles" in provisioning (ie. &lt;code&gt;provisioning/roles/security&lt;/code&gt;). You can see the change we need to make to the task &lt;a href="https://github.com/a-fro/ansible-role-security/commit/c46cb58de6f244cc22300e3c1473e3f8af407865"&gt;here&lt;/a&gt;. Then, we &lt;a href="https://github.com/a-fro/ansible-drupal-lamp/blob/master/provisioning/playbook.yml"&gt;modify the playbook&lt;/a&gt; to use our local "security" role, rather than geerlingguy.security.&lt;/p&gt;

&lt;p&gt;The second issue we face is that the first time we connect to our server, we'll do it as root over port 22, so that we can add the deploy_user account, and update the security configuration. Initially, I was just modifying the variables depending on whether it was the first time I was running the playbook, but that got old really quickly as I created, configured and destroyed my droplets to work through all the issues. And while there may be better ways to do this, what worked for me was to add an additional playbook that handles our initial configuration. So create a &lt;code&gt;provisioning/deploy_config.yml&lt;/code&gt; file and add the following lines to it:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---

- hosts: all
  sudo: yes

  vars_files:
    - vars/main.yml
    - vars/deploy_config.yml

  pre_tasks:
    - include: tasks/deploy_user.yml

  roles:
    - security
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's the task that configures the deploy_user:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
- name: Ensure admin group exists.
  group: name=admin state=present

- name: Add deployment user
  user: name='{{ deploy_user }}'
        state=present
        groups="sudo,admin"
        shell=/bin/bash

- name: Create .ssh folder with correct permissions.
  file: &gt;
    path="/home/{{ deploy_user }}/.ssh/"
    state=directory
    owner="{{ deploy_user }}"
    group=admin
    mode=700

- name: Add authorized deploy key
  authorized_key: user="{{ deploy_user }}"
                  key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
                  path="/home/{{ deploy_user }}/.ssh/authorized_keys"
                  manage_dir=no
  remote_user: "{{ deploy_user }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The private/public key pair you define in the "Add authorized deploy key" task and in your &lt;code&gt;ansible_ssh_private_key_file&lt;/code&gt; variable should have access to both your remote server and your GitHub repository. If you've forked or cloned &lt;a href="https://github.com/a-fro/ansible-drupal-lamp"&gt;my version&lt;/a&gt;, then you will definitely need to modify the keys.&lt;/p&gt;

&lt;p&gt;Our final security configuration prep step is to leverage Ansible's variable precendence to override the ssh settings to use root and the default ssh port with the following lines in &lt;code&gt;provisioning/vars/deploy_config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
ansible_ssh_user: root
ansible_ssh_port: 22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have everything in place to configure the basic security we're adding to our server. Remembering that one of we want our playbooks to work both locally over Vagrant and remotely, we can first try to run this playbook in our dev environment. I couldn't find a good way to make this seamless with Vagrant, so I've added a conditional statement to the Vagrantfile:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="ruby"&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu-precise-64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.88.88"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../a-fro.dev", "/var/www/a-fro.dev", :nfs =&gt; true

  # Configure VirtualBox.
  config.vm.provider :virtualbox do |vb|
    # Set the RAM for this VM to 512M.
    vb.customize ["modifyvm", :id, "--memory", "512"]
    vb.customize ["modifyvm", :id, "--name", "a-fro.dev"]
  end

  # Enable provisioning with Ansible.
  config.vm.provision "ansible" do |ansible|
    ansible.inventory_path = "provisioning/inventory"
    ansible.sudo = true
    # ansible.raw_arguments = ['-vvvv']
    ansible.sudo = true
    ansible.limit = 'dev'

    initialized = false

    if initialized
      play = 'playbook'
      ansible.extra_vars = { ansible_ssh_private_key_file: '~/.ssh/ikon' }
    else
      play = 'deploy_config'
      ansible.extra_vars = {
        ansible_ssh_user: 'vagrant',
        ansible_ssh_private_key_file: '~/.vagrant.d/insecure_private_key'
      }
    end
    ansible.playbook = "provisioning/#{play}.yml"
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first time we run &lt;code&gt;vagrant up&lt;/code&gt;, if &lt;code&gt;initialized&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, then it's going to run deploy_config. Once it's been initialized the first time (assuming there were no errors), you can set &lt;code&gt;initialized&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and from that point on, playbook.yml will run when we &lt;code&gt;vagrant provision&lt;/code&gt;. Assuming everything worked for you, then we're ready to configure our remote server with &lt;code&gt;ansible-playbook provisioning/deploy_config.yml -i provisioning/inventory --limit=staging&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="installing-drupal"&gt;Installing Drupal&lt;/h3&gt;

&lt;p&gt;Whew! Take a deep breath, because we're really at the home stretch now. In part 1, we used a modified &lt;a href="https://github.com/a-fro/drupal-dev-vm/blob/part1/provisioning/tasks/drupal.yml"&gt;Drupal task file&lt;/a&gt; to install Drupal. Since then, however, Jeff has accepted a couple of pull requests that get us really close to being able to use his &lt;a href="https://github.com/geerlingguy/ansible-role-drupal"&gt;Drupal Ansible Role&lt;/a&gt; straight out of the box. I have another pull request issued that get's us 99% of the way there, but since that hasn't been accepted, we're going to follow the strategy we used with the security role and add a "drupal" folder to the roles.&lt;/p&gt;

&lt;p&gt;I've uploaded a branch of &lt;a href="https://github.com/a-fro/ansible-role-drupal/tree/blog_part_2"&gt;ansible-role-drupal&lt;/a&gt;, that includes the modifications we need. They're all in the &lt;code&gt;provisioning/drupal.yml&lt;/code&gt; task, and I've outlined the changes and reasons in my &lt;a href="https://github.com/geerlingguy/ansible-role-drupal/pull/8"&gt;pull request&lt;/a&gt;. If you're following along, I suggest downloading &lt;a href="https://github.com/a-fro/ansible-role-drupal/tree/blog_part_2"&gt;that branch from GitHub&lt;/a&gt; and adding it to a &lt;code&gt;drupal&lt;/code&gt; folder in your &lt;code&gt;provisioning/roles&lt;/code&gt;. One additional change that I have not created a pull request for relates to the structure I use for Drupal projects. I like to put Drupal in a subfolder of the repository root (typically called &lt;code&gt;docroot&lt;/code&gt;). As many readers will realize, this is in large part because we often host on Acquia. And while we're not doing that in this case, I still find it convenient to be able to add other folders (docs, bin scripts, etc.) alongside the Drupal docroot. The final modification we make, then, is to checkout the repository to &lt;code&gt;/var/www/{{ drupal_domain }}&lt;/code&gt; (rather than &lt;code&gt;{{ drupal_core_path }}&lt;/code&gt;, which points to the docroot folder of the repo).&lt;/p&gt;

&lt;p&gt;We now have all our drops in a row and we're ready to run our playbook to do the rest of the server configuration and install Drupal! As I mentioned above, we can modify our Vagrantfile to set &lt;code&gt;initialized&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and run &lt;code&gt;vagrant provision&lt;/code&gt;, and our provisioner should run. If you run into issues, you can uncomment the &lt;code&gt;ansible.raw_arguments&lt;/code&gt; line and enable verbose output.&lt;/p&gt;

&lt;p&gt;One final note before we provision our staging server. While &lt;code&gt;vagrant provision&lt;/code&gt; works just fine, I think I've made my preference clear for having consistency between environments. We can do that here by modifying the host_vars for dev:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
drupal_domain: "a-fro.dev"
security_ssh_port: 22
ansible_ssh_port: "{{ security_ssh_port }}"
ansible_ssh_user: "{{ deploy_user }}"
ansible_ssh_private_key_file: '~/.ssh/id_rsa'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, assuming that you already ran &lt;code&gt;vagrant up&lt;/code&gt; with &lt;code&gt;initialized&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;, then you can run your playbook for dev in the same way you will for your remote servers:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;cd provisioning
ansible-playbook playbook.yml -i inventory --limit=dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything runs without a hitch on your vagrant server, then you're ready to run it remotely with &lt;code&gt;ansible-playbook playbook.yml -i inventory --limit=staging&lt;/code&gt;. A couple of minutes later, you should see your Drupal site installed on your remote server.&lt;/p&gt;

&lt;h3 id="simple-deployments"&gt;Simple Deployments&lt;/h3&gt;

&lt;p&gt;I'm probably not the only reader of Jeff's awesome book &lt;a href="https://leanpub.com/ansible-for-devops"&gt;Ansible for Devops&lt;/a&gt; who is looking forward to him completing Chapter 9, Deployments with Ansible. In the meantime, however, we can create a simple deploy playbook with two tasks:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;---
- hosts: all

  vars_files:
    - vars/main.yml

  tasks:
    - name: Check out the repository.
      git: &gt;
        repo='git@github.com:a-fro/a-fro.com.git'
        version='master'
        accept_hostkey=yes
        dest=/var/www/{{ drupal_domain }}
      sudo: no

    - name: Clear cache on D8
      command:
        chdir={{ drupal_core_path }}
        drush cr
      when: drupal_major_version == 8

    - name: Clear cache on D6/7
      command:
        chdir={{ drupal_core_path }}
        drush cc all
      when: drupal_major_version &lt; 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we've added a conditional that checks for a variable called drupal_major_version, so you should add that to your &lt;code&gt;provisioniong/vars/main.yml&lt;/code&gt; file. If I was running a D7 site, I'd probably add tasks to the deploy script such as &lt;code&gt;drush fr-all -y&lt;/code&gt;, but this suffices for now. Since I'm pretty new to D8, if you have ideas on other tasks that would be helpful (such as a &lt;a href="http://nuvole.org/blog/2014/aug/20/git-workflow-managing-drupal-8-configuration"&gt;git workflow for CM&lt;/a&gt;), then I'm all ears!&lt;/p&gt;

&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope you enjoyed this 2 part series on Drupal and Ansible. One final note for the diligent reader relates to choosing the most basic hosting plan, which limits my server to 512MB of ram. I've therefore added an &lt;a href="https://github.com/a-fro/ansible-drupal-lamp/blob/master/provisioning/tasks/swap.yml"&gt;additional task&lt;/a&gt; that adds and configures &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-12-04"&gt;swap space&lt;/a&gt; when not on Vagrant.&lt;/p&gt;

&lt;p&gt;Thanks to the many committed open source developers (and Jeff Geerling in particular), devops for Drupal are getting dramatically simpler. As the community still reels from the effects of Drupalgeddon, it's easy to see how incredibly valuable it is to be able to easily run commands across  a range of servers and codebases. Please let me know if you have questions, issues, tips or tricks, and as always, thanks for reading.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:20:35 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">11 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Keeping Compiled CSS Out of your Git Repository on Acquia [Updated]</title>
  <link>https://www.a-fro.com/blog/drupal/keeping-compiled-css-out-your-git-repository-acquia-updated</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Keeping Compiled CSS Out of your Git Repository on Acquia [Updated]&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:17&lt;/span&gt;

            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2014-10-27T12:00:00Z" class="datetime"&gt;October 27, 2014&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;A couple of months ago, after a harrowing cascade of git merge conflicts involving compiled css, we decided it was time to subscribe to the philosophy that &lt;a href="http://pointnorth.io/#preprocessed-languages"&gt;compiled CSS doesn't belong in a git repository&lt;/a&gt;. Sure, there are &lt;a href="http://carwinyoung.com/2013/01/23/avoiding-git-conflicts-involving-compiled-sass/"&gt;other technical solutions&lt;/a&gt; teams are &lt;a href="http://mobileresponse.blogspot.com/2013/11/using-sass-with-compass-and-large.html"&gt;tossing around&lt;/a&gt; that try to handle merging more gracefully, but I was more intererested in simply keeping the CSS out of the repo in the first place. After &lt;a href="http://stackoverflow.com/questions/1274057/making-git-forget-about-a-file-that-was-tracked-but-is-now-gitignored"&gt;removing the CSS from the repo&lt;/a&gt;, we suddenly faced two primary technical challenges:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;During development, switching branches will now need to trigger a recompliation of the stylesheets&lt;/li&gt;
	&lt;li&gt;Without the CSS in the repo, it's hard to know how to get the code up to Acquia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I'll describe the solutions we came up with to handle these challenges, and welcome feedback if you have a different solution.&lt;/p&gt;

&lt;h3&gt;Local Development&lt;/h3&gt;

&lt;p&gt;If you're new to using tools like Sass, Compass, Guard and LiveReload, I recommend taking a look at a project like &lt;a href="http://singlebrook.com/blog/streamlined-drupal-project-setup-and-theming"&gt;Drupal Streamline&lt;/a&gt;. For the purpose of this post, I'm going to assume that you're already using Compass in your project. Once the CSS files have been removed, you'll want to &lt;code&gt;compass compile&lt;/code&gt; to trigger an initial compilation of the stylesheet. However, having to remember to compile every time you switch to a new branch introduces not only an inconvenience, but also a strong possiblily for human error.&lt;/p&gt;

&lt;p&gt;Luckily, we can use git hooks to remove this risk and annoyance. In this case, we'll create a post-checkout hook that triggers compiling every time a new branch is checked out:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Create a file called &lt;code&gt;post-checkout&lt;/code&gt; in the .git/hooks folder&lt;/li&gt;
	&lt;li&gt;Add the following lines to that file:
	&lt;pre&gt;
&lt;code data-language="shell"&gt;#! /bin/sh
# Start from the repository root.
cd ./$(git rev-parse --show-cdup)
compass compile&lt;/code&gt;&lt;/pre&gt;
	&lt;/li&gt;
	&lt;li&gt;From the command line in the repository root, type &lt;code&gt;chmod +x .git/hooks/post-checkout&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Assuming you have compass correctly configured, you should see the stylesheets getting re-compiled the next time you &lt;code&gt;git checkout [branch]&lt;/code&gt;, even if you're not already running Guard and LiveReload.&lt;/p&gt;

&lt;h3&gt;Deploying to Acquia&lt;/h3&gt;

&lt;p&gt;Now that CSS is no longer being deployed when we push our repo up to Acquia, we need to figure out how we're going to get it there. It would be possible to force-add the ignored stylesheets before I push the branch up, but I don't really want all those additional commits on my development branches in particular. Luckily, Acquia has a solution that we can hack which will allow us to push the files up to Dev and Stage (note, we'll handle prod differently).&lt;/p&gt;

&lt;h3&gt;Enter LiveDev&lt;/h3&gt;

&lt;p&gt;Acquia has a setting that you can toggle on both the dev and test environments that allows you to modify the files on the server. It's called 'livedev', and we're going to exploit its functionality to get our compiled CSS up to those environments. After enabling livedev in the &lt;a href="Get/url/%20and%20image%20here"&gt;Acquia workflow interface&lt;/a&gt;, you are now able to scp files up to the server during deployment. Because I like to reduce the possibility of human error, I prefer to create a deploy script that handles this part for me. It's basically going to do three things:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Compile the css&lt;/li&gt;
	&lt;li&gt;scp the css files up to Acquia livedev for the correct environment&lt;/li&gt;
	&lt;li&gt;ssh into Acquia's server and checkout the code branch that we just pushed up.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the basic deploy script that we can use to accomplish these goals:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="shell"&gt;#!/bin/bash

REPO_BASE='[project foldername here (the folder above docroot)]'

# check running from the repository base
CURRENT_DIR=${PWD##*/}
if [ ! "$CURRENT_DIR" = $REPO_BASE ]; then
  echo 'Please be sure that you are running this command from the root of the repo.'
  exit 2
fi

# Figure out which environment to deploy to
while getopts "e:" var; do
    case $var in
        e) ENV="${OPTARG}";;
    esac
done

# Set the ENV to dev if 'e' wasn't passed as an argument
if [ "${#ENV}" -eq "0" ]; then
  ENV='dev'
fi

if [ "$ENV" = "dev" ] || [ "$ENV" = "test" ]; then
  # Set the css_path and livedev path
  CSS_PATH='docroot/sites/all/themes/theme_name/css/'

  # Replace [user@devcloud.host] with your real Acquia Cloud SSH host
  # Available in the AC interface under the "Users and keys" tab
  ACQUIA_LIVEDEV='[user@devcloud.host]:~/$ENV/livedev/'

  # Get the branch name
  BRANCH_NAME="$(git symbolic-ref HEAD 2&gt;/dev/null)" ||
  BRANCH_NAME="detached"     # detached HEAD
  BRANCH_NAME=${BRANCH_NAME##refs/heads/}

  echo "Pushing $BRANCH_NAME to acquia cloud $ENV"
  git push -f ac $BRANCH_NAME # This assumes you have a git remote called "ac" that points to Acquia

  echo "Compiling css"
  compass compile

  # Upload to server
  echo "Uploading styles to server"
  scp -r $CSS_PATH "$ACQUIA_LIVEDEV~/$ENV/livedev/$CSS_PATH":

  # Pull the updates from the branch to livedev and clear cache
  echo "Deploying $BRANCH_NAME to livedev on Acquia"
  ssh $ACQUIA_LIVEDEV "git checkout .; git pull; git checkout $BRANCH_NAME; cd docroot; exit;"

  echo "Clearing cache on $ENV"
  cd docroot
  drush [DRUSH_ALIAS].$ENV cc all -y

  echo "Deployment complete"
  exit
fi

# If not dev or test, throw an error
echo 'Error: the deploy script is for the Acquia dev and test environments'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I don't pretend to be a shell scripting expert and I'm sure this script could be improved; however, it might be helpful to explain a few things. To start with, you will need to &lt;code&gt;chmod +x [path/to/file]&lt;/code&gt;. I always put scripts like this in a bin folder at the root of the repo. There are a few other variables that you'll need to change if you want to use this script, such as &lt;code&gt;REPO_BASE, CSS_PATH and ACQUIA_LIVEDEV&lt;/code&gt;. Also, the script assumes that you have a git remote called "ac", which should point to your Acquia Cloud instance. Finally, the drush cache clear portion assumes that you have a custom drush alias created for your livedev environment for both dev and test; if not, you can remove those lines. To deploy the site to dev, you would run the command &lt;code&gt;bin/deploy&lt;/code&gt;, or &lt;code&gt;bin/deploy -e test&lt;/code&gt; to deploy to the staging environment.&lt;/p&gt;

&lt;h3&gt;Deploying to Prod&lt;/h3&gt;

&lt;p&gt;Wisely, Acquia doesn't provide keys to run livedev on the production environment, and this approach is probably more fragile than we'd like anyway. For the production environment, we're going to use an approach that force-adds the stylesheet when necessary.&lt;/p&gt;

&lt;p&gt;To do this, we're again going to rely on a git hook to help reduce the possibility of human error. Because our development philosophy relies on a single branch called "production" that we merge into and tag, we can use git's post-merge hook to handle the necessary force-adding of our stylesheet.&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="shell"&gt;#! /bin/sh

BRANCH_NAME="$(git symbolic-ref HEAD 2&gt;/dev/null)" ||
BRANCH_NAME="detached"
BRANCH_NAME=${BRANCH_NAME##refs/heads/}
CSS_PATH="docroot/sites/all/themes/theme_name/css/"

if [ "$BRANCH_NAME" = "production" ]; then
  compass compile
  git add $CSS_PATH -f
  git diff --cached --exit-code &gt; /dev/null
  if [ "$?" -eq 1 ]; then
    git commit -m 'Adding compiled css to production'
  fi
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the post-checkout hook, you'll need to make sure this file is executable. Note that after the script stages the css files, git is able to confirm whether there are differences in the current state of the files, and only commit the files when there are changes. After merging a feature branch into the production branch, the post-merge hook gets triggered, and I can then add a git tag, push the code and new tag to the Acquia remote, and then utilize Acquia's cloud interface to deploy the new tag.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;While this may seem like a lot of hoops to jump through to keep compiled CSS out of the repository, the deploy script actually fits very nicely with my development workflow, because it allows me to easily push up the current branch to dev for acceptance testing. In the future, I'd like to rework this process to utilize Acquia's Cloud API, but frankly, my tests with the API thus far have returned unexpected results, and I haven't wanted to submit one of our coveted support tickets to figure out why the API isn't working correctly. If you're reading this and can offer tips for improving what's here, sharing how you accomplish the same thing, or happen to work at Acquia and want to talk about the bugs I'm seeing in the API, please leave a comment. And thanks for reading!&lt;/p&gt;

&lt;h3&gt;Update&lt;/h3&gt;

&lt;p&gt;Dave Reid made a comment below about alternatives to LiveDev and the possibility of using tags to accomplish this. As I mentioned above, LiveDev works well for me (on dev and test) because it fits well into my typical deployment workflow. The problem I see with using tags to trigger a hook is that we are in the practice of tagging production releases, but not for dev or test. Thinking through Dave's suggestion, however, led to me to an alternative approach to LiveDev that still keeps the repo clean using Git's "pre-push" hook:&lt;/p&gt;

&lt;pre&gt;
&lt;code data-language="shell"&gt;#! /bin/sh

PUSH_REMOTE=$1
ACQUIA_REMOTE='ac' #put your Acquia remote name here

if [ $PUSH_REMOTE = $ACQUIA_REMOTE ]; then
  compass compile
  git add docroot/sites/all/themes/ilr_theme/css/ -f
  git diff --cached --exit-code &gt; /dev/null
  if [ "$?" -eq 1 ]; then
    git commit -m "Adding compiled css"
  fi
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hook receives the remote as the first argument, which allows us to check whether we're pushing to our defined Acquia remote. If we are, the script then checks for CSS changes, and adds the additional commit if necessary. The thing I really like about this approach is that the GitHub repository won't get cluttered with the extra commit, but the CSS files can be deployed to Acquia without livedev.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:17:28 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">10 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Ansible and Drupal Development</title>
  <link>https://www.a-fro.com/blog/drupal/ansible-and-drupal-development</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Ansible and Drupal Development&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:15&lt;/span&gt;

            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2014-10-22T12:00:00Z" class="datetime"&gt;October 22, 2014&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;As I mentioned in my &lt;a href="https://www.a-fro.com/hello-world-from-drupal-8"&gt;hello world post&lt;/a&gt;, I've been learning Ansible via Jeff Geerling's great book &lt;a href="https://leanpub.com/ansible-for-devops"&gt;Ansible for Devops&lt;/a&gt;. When learning new technologies, there is no substitute for diving in and playing with them on a real project. This blog is, in part, the byproduct of my efforts to learn and play with Ansible. Yet embedded within that larger goal were a number of additional technical requirements that were important to me, including:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Setting up a local development environment using Vagrant&lt;/li&gt;
	&lt;li&gt;Installing Drupal from a github repo&lt;/li&gt;
	&lt;li&gt;Configuring Vagrant to run said repo over NFS (for ST3, LiveReload, Sass, etc.)&lt;/li&gt;
	&lt;li&gt;Using the same playbook for both local dev and remote administration (on DigitalOcean)&lt;/li&gt;
	&lt;li&gt;Including basic server security&lt;/li&gt;
	&lt;li&gt;Making deployments simple&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog entry, we'll look at the first three requirements in greater detail, and save the latter three for another post.&lt;/p&gt;

&lt;h3&gt;Configuring Local Development with Vagrant&lt;/h3&gt;

&lt;p&gt;At first glance, requirement #1 seems pretty simple. Ansible plays nicely with Vagrant, so if all you want to do is quickly spin up a Drupal site, download Jeff's &lt;a href="https://github.com/geerlingguy/drupal-dev-vm"&gt;Drupal Dev VM&lt;/a&gt; and you'll be up and running in a matter of minutes. However, when taken in the context of the 2nd and 3rd requirements, we're going to need to make some modifications to the Drupal Dev VM.&lt;/p&gt;

&lt;p&gt;To start with, the Drupal Dev VM uses a drush make file to build the site. Since we want to build the site based on our own git repository, we're going to need to find a different strategy. This is actually a recent modification to the Drupal Dev VM, which previously used an Ansible role called &lt;a href="https://github.com/geerlingguy/ansible-role-drupal"&gt;"Drupal"&lt;/a&gt;. If you look carefully at that github repo, you'll actually notice that Jeff accepted one of my pull requests to add the functionality we're looking for from this role. The last variable is called drupal_repo_url, which you can use if you want to install Drupal from your own repository rather than Drupal.org. We'll take a closer look at this in a moment.&lt;/p&gt;

&lt;h3&gt;Installing Drupal with a Custom Git Repo&lt;/h3&gt;

&lt;p&gt;Heading back to the &lt;a href="https://github.com/geerlingguy/drupal-dev-vm"&gt;Drupal Dev VM&lt;/a&gt;, you can see that the principle change Jeff made was to remove geerlingguy.drupal from the dependency list, and replace it with a new task defined in the &lt;a href="https://github.com/geerlingguy/drupal-dev-vm/blob/master/provisioning/tasks/drupal.yml"&gt;drupal.yml&lt;/a&gt; file. After cloning the Dev VM onto your system, remove &lt;code&gt;- include: tasks/drupal.yml&lt;/code&gt; from the tasks section and add &lt;code&gt;- geerlingguy.drupal&lt;/code&gt; to the roles section.&lt;/p&gt;

&lt;p&gt;After replacing the Drupal task with the Ansible Drupal role, we also need to update the &lt;a href="https://github.com/geerlingguy/drupal-dev-vm/blob/master/provisioning/vars/main.yml"&gt;vars file&lt;/a&gt; in the local repo with the &lt;a href="https://github.com/geerlingguy/ansible-role-drupal/blob/master/defaults/main.yml"&gt;role-specific vars&lt;/a&gt;. There, you can update the &lt;code&gt;drupal_repo_url&lt;/code&gt; to point to your github url rather than the project url at git.drupal.org.&lt;/p&gt;

&lt;h3&gt;Configuring Vagrant for NFS&lt;/h3&gt;

&lt;p&gt;At this point, we would be able to meet the first two requirements with a simple &lt;code&gt;vagrant up&lt;/code&gt;, which would provision the site using Ansible (assuming that you've already installed the dependencies). Go ahead and try it if you're following along on your local machine. But there's a problem, because our third requirement is going to complicate this setup. Currently, Drupal gets downloaded and installed on the VM, which complicates our ability to edit the files using our IDE of choice and also being able to run the necessary Ruby gems like Sass and LiveReload.&lt;/p&gt;

&lt;p&gt;When I was initially working through this process, I spent quite a few hours trying to configure my VM to download the necessary Ruby gems so I could compile my stylesheets with Compass directly on the VM. The biggest drawback for me, however, was that I didn't really want to edit my code using Vim over ssh. What I really needed was to be able to share my local git repo of the site with my Vagrant box via NFS, hence the 3rd requirement.&lt;/p&gt;

&lt;p&gt;In order to satisfy this 3rd requirement, I ended up removing my dependency on the Ansible Drupal role and instead focussed on modifying the Drupal task to meet my needs. Take a look at &lt;a href="https://gist.github.com/a-fro/5ce79021260575336193"&gt;this gist&lt;/a&gt; to see what I did.&lt;/p&gt;

&lt;p&gt;Most of the tasks in that file should be pretty self-explanatory. The only one that might be suprising is the "Copy the css files" task, which is necessary because I like to keep my compiled CSS files out of the repo (more on this coming soon). Here's a gist of an example &lt;a href="https://gist.github.com/a-fro/4796be4b0ec6e9d37422"&gt;vars file&lt;/a&gt; you could use to support this task.&lt;/p&gt;

&lt;p&gt;One other advantage of our modified Drupal task is that we can now specify an install profile to use when installing Drupal. I currently have a &lt;a href="https://github.com/geerlingguy/ansible-role-drupal/pull/6"&gt;pull request&lt;/a&gt; that would add this functionality to the Ansible Drupal Role, but even if that gets committed, it won't solve our problem here because we're not using that role. We could, however, simply modify the "Install Drupal (standard profile) with drush" to install our custom profile if that's part of your typical workflow. If I were installing a D7 site here, I would definitely use a custom profile, since that is my standard workflow, but since we're installing D8 and I haven't used D8 profiles yet, I'm leaving it out for now.&lt;/p&gt;

&lt;p&gt;The next step we need to take in order to get our site working correctly is to modify the &lt;a href="https://github.com/geerlingguy/drupal-dev-vm/blob/master/Vagrantfile"&gt;Vagrantfile&lt;/a&gt; so that we share our local site. You might have noticed in the &lt;a href="https://gist.github.com/a-fro/4796be4b0ec6e9d37422"&gt;vars file&lt;/a&gt; that the &lt;code&gt;drupal_css_path&lt;/code&gt; variable points to a folder on my system named "a-fro.dev", which is, not suprisingly, the folder we want to load over NFS. This can be accomplished by adding the following line to the Vagrantfile:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.vm.synced_folder "../a-fro.dev", "/var/www/a-fro.dev", :nfs =&gt; true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that the folder we point to in /var/www should match the &lt;code&gt;{{ drupal_domain&lt;/code&gt; }} variable we previously declared. However, since this is now pointing to a folder on our local system (rather than on the vm), we'll run into a couple of issues when Ansible provisions the VM. Vagrant expects the synced_folder to exist, and will throw an error if it does not. Therefore, you need to make sure an point to an existing folder that includes the path specified in &lt;code&gt;{{ drupal_core_path }}&lt;/code&gt;. Alternatively, you could clone a-fro.com repo into the folder above your drupal-dev-vm folder using the command &lt;code&gt;git clone git@github.com:a-fro/a-fro.com.git a-fro.dev&lt;/code&gt;. Additionally, you will probably receive an error when the www.yml task tries to set permissions on the www folder. The final change we need to make, then, is to remove the "Set permissions on /var/www" task from provisioning/tasks/www.yml&lt;/p&gt;

&lt;p&gt;With this final change in place, we should now be able to run &lt;code&gt;vagrant up&lt;/code&gt; and the the site should install correctly. If it doesn't work for you, one possible gotcha is with the task that checks if Drupal is already installed. That task looks for the settings.php file, and if it finds it, the Drush site-install task doesn't run. If you're working from a previously installed local site, the settings.php file may already exist.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This completes our first three requirements, and should get you far enough that you could begin working on building your own local site and getting it ready to deploy to your new server. You can find the &lt;a href="https://github.com/a-fro/drupal-dev-vm/tree/part1"&gt;final working version&lt;/a&gt; from this post on GitHub. In the next blog post, we'll look more closely at the last three requirements, which I had to tackle in order to get the site up and running. Thanks for reading.&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:15:24 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">9 at https://www.a-fro.com</guid>
    </item>
<item>
  <title>Hello World from Drupal 8</title>
  <link>https://www.a-fro.com/blog/drupal/hello-world-drupal-8</link>
  <description>&lt;span class="field field--name-title field--type-string field--label-hidden"&gt;Hello World from Drupal 8&lt;/span&gt;
&lt;span class="field field--name-uid field--type-entity-reference field--label-hidden"&gt;&lt;span&gt;admin&lt;/span&gt;&lt;/span&gt;
&lt;span class="field field--name-created field--type-created field--label-hidden"&gt;Sun, 12/26/2021 - 18:13&lt;/span&gt;

            &lt;div class="field field--name-field-published-date field--type-datetime field--label-hidden field__item"&gt;&lt;time datetime="2014-10-08T12:00:00Z" class="datetime"&gt;October 8, 2014&lt;/time&gt;
&lt;/div&gt;
      
      &lt;div class="field field--name-field-components field--type-entity-reference-revisions field--label-hidden field__items"&gt;
              &lt;div class="field__item"&gt;  &lt;div class="paragraph paragraph--type--rich-text paragraph--view-mode--default"&gt;
          
            &lt;div class="clearfix text-formatted field field--name-field-body field--type-text-long field--label-hidden field__item"&gt;&lt;p&gt;Welcome! This site has been a while in the making, but I'm really excited to share it with you. Back in Austin at DrupalCon, I was inspired by Jeff Geerling's "Devops for Humans" presentation and immediately decided that I needed to start using Ansible. Well, it's been a long road, but the site is now live and I'm really looking forward to sharing the ups and downs of the journey. Oh, and if you don't have it already, Jeff's book &lt;em&gt;Ansible for Devops&lt;/em&gt; is well worth it. More soon...&lt;/p&gt;
&lt;/div&gt;
      
      &lt;/div&gt;
&lt;/div&gt;
          &lt;/div&gt;
  
  &lt;div class="field field--name-field-tags field--type-entity-reference field--label-above"&gt;
    &lt;div class="field__label"&gt;Tags&lt;/div&gt;
          &lt;div class="field__items"&gt;
              &lt;div class="field__item"&gt;&lt;a href="https://www.a-fro.com/blog/drupal" hreflang="en"&gt;Drupal&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 26 Dec 2021 18:13:24 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">8 at https://www.a-fro.com</guid>
    </item>

  </channel>
</rss>
