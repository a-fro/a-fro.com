<?php

/**
 * @file
 * Contains media related functions.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Takes a paragraph field and returns the image properties
 */
function media_essentials_get_image_properties_from_entity_reference_field($entity, $field_name='field_image_reference') {
  if ($media_entity = media_essentials_get_media_entity_from_reference($entity->get($field_name)->first())) {
    return media_essentials_get_image_properties_from_media_entity($media_entity);
  }
  return NULL;
}

/**
 * Takes a paragraph and field name and returns the image properties
 */
function media_essentials_get_image_properties_from_paragraph_field($paragraph, $field_name) {
  if ($media_entity = media_essentials_get_media_entity_from_reference($paragraph->get($field_name)->first())) {
    return media_essentials_get_image_properties_from_media_entity($media_entity);
  }
  return NULL;
}

/**
 * Takes an entity_reference and returns the media_entity

 * @param  $media_reference
 *
 * @return object the media entity
 */
function media_essentials_get_media_entity_from_reference($media_reference=NULL) {
  if ($media_reference) {
    $media_entity = $media_reference->get('entity')->getTarget();
    return $media_entity;
  }
  return NULL;
}

/**
 * Takes a media entity and returns a keyed array of entities: file, image, and media.
 *
 * @param $media_entity
 *
 * @return array containing a file, image, and media entity or null
 */
function media_essentials_get_image_properties_from_media_entity($media_entity, $field_name='field_media_image') {
  if ($media_entity) {
    if ($img_entity = $media_entity->get($field_name)->first()) {
      if ($file_entity = $img_entity->get('entity')->getTarget()) {
        return [
          'uri' => $file_entity->get('uri')->getString(),
          'alt' => $img_entity->get('alt')->getString(),
          'title' => $img_entity->get('title')->getString(),
        ];
      }
    }
  }
  return NULL;
}

function media_essentials_image_display_options(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  return [
    'full_content' => 'Full content',
    'full_width' => 'Full width',
    'focussed_portrait' => "Portrait",
    'original' => 'Original',
  ];
}
